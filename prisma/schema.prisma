generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum FamilyPlan {
  FREE
  BRONZE
  SILVER
  GOLD
}

enum TagColor {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
  PINK
  BROWN
  GREY
  BLACK
  WHITE
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  active        Boolean   @default(true)
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  role          UserRole  @default(USER)

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  Memberships    Member[]
  Families       Family[]
  CreatedInvites Invite[]
  Shopping       Shopping[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Member {
  id        String     @id @default(cuid())
  userId    String
  familyId  String
  createdAt DateTime   @default(now())
  role      MemberRole @default(MEMBER)

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
}

model Family {
  id         String   @id @default(cuid())
  active     Boolean  @default(true)
  name       String
  createdAt  DateTime @default(now())
  ownerId    String
  shoppingId String?  @unique

  Owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Members        Member[]
  Invites        Invite[]
  StockItems     StockItem[]
  StockItemMetas StockItemMeta[]
  StockItemTags  StockItemTag[]
  Shopping       Shopping?
  Categories     Category[]
  CategoryGenre  CategoryGenre[]
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name            String
  description     String @default("")
  color           String
  familyId        String
  categoryGenreId String

  Family         Family                @relation(fields: [familyId], references: [id], onDelete: Cascade)
  CategoryGenres CategoryGenre         @relation(fields: [categoryGenreId], references: [id], onDelete: Cascade)
  StockItems     CategoryOnStockItem[]
}

model CategoryGenre {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name        String
  description String @default("")
  familyId    String

  Family   Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)
  Category Category[]
}

model CategoryOnStockItem {
  stockItemMetaId String
  categoryId      String

  StockItemMeta StockItemMeta @relation(fields: [stockItemMetaId], references: [id], onDelete: Cascade)
  Category      Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([stockItemMetaId, categoryId])
}

model Invite {
  id          String   @id @default(cuid())
  active      Boolean  @default(true)
  familyId    String
  createdById String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  Family    Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  CreatedBy User?  @relation(fields: [createdById], references: [id], onDelete: SetNull)
}

model StockItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  quantity  Int      @default(0)

  familyId String
  metaId   String @unique

  Family       Family        @relation(fields: [familyId], references: [id], onDelete: Cascade)
  Meta         StockItemMeta @relation(fields: [metaId], references: [id], onDelete: Cascade)
  ShoppingItem ShoppingItem?
}

model StockItemMeta {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name        String
  description String @default("")
  unit        String
  price       Float
  step        Int
  threshold   Int
  position    String

  familyId String

  StockItem StockItem?
  Family    Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)

  Tags       StockItemTag[]
  Categories CategoryOnStockItem[]

  @@unique([familyId, position])
}

model StockItemTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name        String
  description String   @default("")
  color       TagColor @default(WHITE)
  familyId    String

  Family         Family          @relation(fields: [familyId], references: [id], onDelete: Cascade)
  StockItemMetas StockItemMeta[]
}

model Shopping {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId   String
  familyId String @unique

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  Items ShoppingItem[]
}

model ShoppingItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  shoppingId  String
  stockItemId String @unique

  quantity Int @default(0)

  Shopping  Shopping  @relation(fields: [shoppingId], references: [id], onDelete: Cascade)
  StockItem StockItem @relation(fields: [stockItemId], references: [id], onDelete: Cascade)
}
