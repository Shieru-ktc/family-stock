generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum FamilyPlan {
  FREE
  BRONZE
  SILVER
  GOLD
}

model User {
  id            String    @id @default(cuid())
  active        Boolean   @default(true)
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  Memberships    Member[]
  Families       Family[]
  CreatedInvites Invite[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Member {
  id        String     @id @default(cuid())
  userId    String
  familyId  String
  createdAt DateTime   @default(now())
  role      MemberRole @default(MEMBER)

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
}

model Family {
  id        String   @id @default(cuid())
  active    Boolean  @default(true)
  name      String
  createdAt DateTime @default(now())
  ownerId   String

  Owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Members        Member[]
  Invites        Invite[]
  StockItems     StockItem[]
  StockItemMetas StockItemMeta[]
  StockItemTags  StockItemTag[]
}

model Invite {
  id          String   @id @default(cuid())
  active      Boolean  @default(true)
  familyId    String
  createdById String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  Family    Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  CreatedBy User?  @relation(fields: [createdById], references: [id], onDelete: SetNull)
}

model StockItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  quantity  Int      @default(0)

  familyId String
  metaId   String @unique

  Family Family        @relation(fields: [familyId], references: [id], onDelete: Cascade)
  Meta   StockItemMeta @relation(fields: [metaId], references: [id], onDelete: Cascade)
}

model StockItemMeta {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name        String
  description String
  unit        String
  price       Float
  step        Int
  threshold   Int

  familyId String

  StockItem StockItem?
  Family    Family     @relation(fields: [familyId], references: [id], onDelete: Cascade)

  Tags StockItemTag[]
}

model StockItemTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name        String
  description String
  color       String
  familyId    String

  Family         Family          @relation(fields: [familyId], references: [id], onDelete: Cascade)
  StockItemMetas StockItemMeta[]
}
